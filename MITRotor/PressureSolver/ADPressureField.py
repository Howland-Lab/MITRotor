from typing import Tuple

import numpy as np
from scipy.interpolate import RegularGridInterpolator
import polars as pl

from numpy.typing import ArrayLike
from .Geometry import EquidistantRectGridEven
from .poisson_pressure_nonlinear import NonLinearPoisson


class NonlinearADPressureField:
    """
    This class represents the nonlinear centerline pressure field generated by
    solving a nonlinear Poisson equation on a rectangular grid.
    """

    def __init__(
        self, Lx=60.0, Ly=60.0, dx=0.1, dy=1.0, ddp=0.05, iterations=3, relax=0.0
    ):
        """
        Lx (float) : x-dimension of the rectangular grid
        Ly (float) : y-dimension of the rectangular grid
        dx (float) : x-spacing of grid points
        dy (float) : y-spacing of grid points
        ddp (float) : dp spacing for interpolation table
        iterations (int) : number of iterations to solve PDE
        """
        self.geometry = EquidistantRectGridEven(Lx, Ly, dx, dy)
        self.max_iter = iterations + 1
        self.relax = relax

        dps, xs, ps = self._generate_pressure_table(ddp, dx, xmax=Lx/2)

        self.interpolator = RegularGridInterpolator(
            [dps, xs], ps, bounds_error=False, fill_value=0
        )

    def _generate_pressure_table(
        self, ddp: float, dx: float, xmax=30
    ) -> Tuple[ArrayLike, ...]:
        """
        Generate interpolation table by solving nonlinear PDE

        ddp (float) : dp spacing for interpolation table
        dx (float) : streamwise x-spacing for interpolation table
        xmax (float) : max x-value for interpolation table

        Returns tuple of arrays:
            dps (np.ndarray): dp values for interpolation
            xs (np.ndarray): x values for interpolation
            ps (np.ndarray): pressure values for interpolation
        """
        # Define dp and x_0 grid
        dps = np.arange(0, 1 + ddp, ddp)
        xs = np.arange(0, xmax, dx)

        # Generate nonlinear pressure table
        ps = np.zeros((len(dps), len(xs)))
        for i, dp in enumerate(dps):
            ps[i, :] = self._solve_pressure(dp, xs)

        # clip non-linear pressure to below zero.
        ps = np.minimum(ps, 0)

        return dps, xs, ps

    def _solve_pressure(self, dp: float, x: ArrayLike) -> ArrayLike:
        """
        Solves for the centerline pressure term at the given x locations (can be a
        vector). Note: dp cannot be a vector in this implementation. It must be
        a float.

        dp (float) : pressure drop over actuator disk
        x (ArrayLike) : streamwise x locations

        Returns:
            ArrayLike: centerline pressure values at x
        """

        fields = []

        def callback(object, i):
            fields.append(object.sol_NL.p)

        pde = NonLinearPoisson(self.geometry, dP=dp)
        sol_tot, sol_f, sol_g = pde.solve(
            max_iter=self.max_iter, relax=self.relax, callback=callback
        )

        combined_field = np.min(fields, axis=0)

        x_ = self.geometry.x
        y_ = self.geometry.y

        interpolator = RegularGridInterpolator(
            [x_, y_], combined_field, bounds_error=False, fill_value=0
        )

        out = interpolator((x, 0), method="linear")
        return out

    def get_pressure(self, dp: ArrayLike, x0: ArrayLike) -> ArrayLike:
        """
        Returns the centerline pressure at the given x location from the
        generated interpolation table, where dp and x0 can be vectors.

        dp (ArrayLike) : values for pressure drop over actuator disk
        x0 (ArrayLike) : streamwise x locations

        Returns:
            ArrayLike: interpolated centerline pressure values
        """
        return self.interpolator((dp, x0))
